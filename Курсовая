#–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–µ–∫–∞—Ä–Ω–µ "–í–∞–Ω–∏–ª—å". –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—à–µ–ª –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ—Ç. –î–ª—è –∞–¥–º–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
#–ø–∞–Ω–µ–ª—å, —Å –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏) –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã. –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# "–ü–∏—Ä–æ–≥–∏" –∏ "–ù–µ –ø–∏—Ä–æ–≥–∏", –≤ –∫–∞–∂–¥–æ–π –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–æ—Ä–∏–∑–Ω—É. –° –∫–æ—Ä–∑–∏–Ω—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –µ—ë
# –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å username —Å–¥–µ–ª–∞–ª —Ç–∞–∫–æ–π-—Ç–æ –∑–∞–∫–∞–∑

import asyncio # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
import sqlite3 # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import logging # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
from aiogram import Bot, Dispatcher, types, F # –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile, URLInputFile, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import token

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=token, parse_mode="HTML")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher() # –î–∏—Å–ø–µ—Ç—á–µ—Ä - –æ–±—ä–µ–∫—Ç, –∑–∞–Ω–∏–º–∞—é—â–∏–π—Å—è –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤—ã–±–æ—Ä–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞

class AdminStates(StatesGroup): # –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher() # –î–∏—Å–ø–µ—Ç—á–µ—Ä - –æ–±—ä–µ–∫—Ç, –∑–∞–Ω–∏–º–∞—é—â–∏–π—Å—è –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤—ã–±–æ—Ä–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞

class AdminStates(StatesGroup): # –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π

    name = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏—ë–º–∞ –∏–º–µ–Ω–∏
    price = State() # –¥–ª—è –ø—Ä–∏—ë–º–∞ —Ü–µ–Ω—ã
    delete = State() # –¥–ª—è —É–¥–∞–ª–µ–Ω–∏–µ

def get_keyboard_products(array): # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥ (–æ–Ω–∞ –Ω—É–∂–Ω–∞. —Ç.–∫. –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    buttons = [] # —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    prebuttons = []
    counter = 0
    for [i] in array:
        counter += 1
        if counter == 1:
            first = types.InlineKeyboardButton(text=i, callback_data='toCart_'+i)
            prebuttons.append(first)
        else:
            counter = 0
            second = types.InlineKeyboardButton(text=i, callback_data='toCart_'+i)
            prebuttons.append(second)
            buttons.append(prebuttons)
            prebuttons = [] # –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –≤ 2 –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–æ–ª–Ω–∏–ª—Å—è, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
    if len(prebuttons) != 0: # –∞ –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –µ—â—ë –æ–¥–Ω–∞ –Ω–µ—á–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –æ–Ω–∞ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—Å—è –æ–¥–Ω–∞
        buttons.append(prebuttons)
    buttons.append([types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="back")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_keyboard_cart(): #–ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ –¥—Ä—É–≥–æ–º—É, —Ç.–∫. –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–Ω—Å–æ–ª–∏ –∞–¥–º–∏–Ω–∞
    buttons = [
        [
            types.InlineKeyboardButton(text="‚úÖ–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order"),
            types.InlineKeyboardButton(text="‚ùå–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="delete_cart")], #
        [types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="back")]] # 1 –º–∞—Å—Å–∏–≤ –≤ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons) # –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–µ –æ–¥–Ω–∞ 3—è –∫–Ω–æ–ø–∫–∞
    return keyboard

async def empty_cart(message: types.Message): #—ç—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
    await message.edit_text(
        f"–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!",
        reply_markup=get_keyboard_cart()
    )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    connection = sqlite3.connect('bakery.db')
    cursor = connection.cursor() #–æ–±—ä–µ–∫—Ç "–∫—É—Ä—Å–æ—Ä" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT * FROM Users WHERE user_id=?', (message.from_user.id,))
    entry = cursor.fetchone()
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="ü•ß–ü–∏—Ä–æ–≥–∏",
        callback_data="Pirogi")
    )
    builder.add(types.InlineKeyboardButton(
        text="üßÅ–ù–µ –ø–∏—Ä–æ–≥–∏",
        callback_data="Ne pirogi")
    )
    builder.add(types.InlineKeyboardButton(
        text="üõí–ö–æ—Ä–∑–∏–Ω–∞",
        callback_data="Cart")
    )
    if message.from_user.id == 1372145704: #–µ—Å–ª–∏ id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å id –∞–¥–º–∏–Ω–∞, –µ–º—É –≤—ã–≤–æ–¥–∏—Ç—Å—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        builder.add(types.InlineKeyboardButton(
            text="üòé–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data="AdminPanel")
        )
    builder.adjust(3) # —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
    if entry is None: #–µ—Å–ª–∏ –∑–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–≤–µ–¥–µ–Ω–∏–π –æ –∫–æ—Ç–æ—Ä–æ–º –µ—â—ë –Ω–µ—Ç –≤ –ë–î, –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ë–î
        cursor.execute('INSERT INTO Users (user_id, full_name) VALUES (?, ?);',
                       (message.from_user.id, message.from_user.full_name))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connection.commit()
        connection.close()
        await message.answer(
            # –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            f'ü•ê <strong>–ü–µ–∫–∞—Ä–Ω—è "–í–∞–Ω–∏–ª—å"</strong> ü•ê\n\n –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤–ø–µ—Ä–≤—ã–µ! \n\n –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
            reply_markup=builder.as_markup()) # reply_markup - —ç—Ç–æ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.
        # delete users message
        await message.delete()
    else:
        await message.answer( #–∞ —Ç–µ–º, –æ –∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–¥ —É–∂–µ –µ—Å—Ç—å - –¥—Ä—É–≥–æ–µ
            f'ü•ê <strong>–ü–µ–∫–∞—Ä–Ω—è "–í–∞–Ω–∏–ª—å"</strong> ü•ê\n\n –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! \n\n –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
            reply_markup=builder.as_markup())
        await message.delete()




@dp.message(Command('images'))
async def upload_photo(message: Message):
    file_ids = []
    image_from_url = URLInputFile("https://avatars.akamai.steamstatic.com/87c4bb7bbd24b73048b123cf183bde83a7a1ce11_full.jpg")
    result = await message.answer_photo(
        image_from_url,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ"
    )
    file_ids.append(result.photo[-1].file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(file_ids))

@dp.message(Command('images2'))
async def upload_photo(message: Message):
    await message.answer_photo('AgACAgIAAxkDAANZZVc2mvTbLYp25NfPhfahftHMgK0AAvXRMRs-n8FKrDsVxDzwZ8oBAAMCAANtAAMzBA')

@dp.message(Command('link'))
async def upload_photo(message: Message):
    await message.answer('<a href = "https://steamcommunity.com/profiles/76561198367341207">LINK</a>', disable_web_page_preview=True)


@dp.callback_query(F.data == "Ne pirogi") #–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ù–µ –ø–∏—Ä–æ–≥–∏. –ó–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—á–∞—é—Ç @dp.callback_query, –∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è @dp.message
async def menu_ne_pirogi(callback: types.CallbackQuery):
    connection = sqlite3.connect('bakery.db')
    cursor = connection.cursor()
    cursor.execute('SELECT name FROM Products WHERE is_pirogi = "0"')
    names = cursor.fetchall()
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    menu = '–£ –Ω–∞—Å –≤ –º–µ–Ω—é –µ—Å—Ç—å:\n'
    for [i] in names: # –¶–∏–∫–ª –≤ –ø–∏—Ç–æ–Ω–µ. –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        cursor.execute(f'SELECT price FROM Products WHERE name="{i}" AND is_pirogi = "0"') #–≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ –ë–î
        price = str(cursor.fetchone()[0])
        menu += str(i) + f'  - {price} —Ä—É–±\n' #–≤—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ+—Ü–µ–Ω—É
    menu += '\n–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?'
    connection.close()
    await bot.send_message(callback.from_user.id, menu, reply_markup=get_keyboard_products(names))
    await callback.answer()

@dp.callback_query(F.data == "Pirogi") #—Ç–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–µ–Ω—é "–ü–∏—Ä–æ–≥–∏"
async def menu_ne_pirogi(callback: types.CallbackQuery):
    connection = sqlite3.connect('bakery.db')
    cursor = connection.cursor()
    cursor.execute('SELECT name FROM Products WHERE is_pirogi = "1"')
    names = cursor.fetchall()
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    menu = '–£ –Ω–∞—Å –≤ –º–µ–Ω—é –µ—Å—Ç—å:\n'
    for [i] in names:
        cursor.execute(f'SELECT price FROM Products WHERE name="{i}" AND is_pirogi = "1"')
        price = str(cursor.fetchone()[0])
        menu += str(i) + f'  - {price} —Ä—É–±\n'
    menu += '\n–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?'
    connection.close()
    await bot.send_message(callback.from_user.id, menu, reply_markup=get_keyboard_products(names))
    await callback.answer()

@dp.callback_query(F.data == "Cart") #–∫–æ—Ä–∑–∏–Ω–∞
async def cart(callback: types.CallbackQuery):
    connection = sqlite3.connect('bakery.db')
    cursor = connection.cursor()
    cursor.execute(f'SELECT product FROM Cart WHERE user_id = "{callback.message.chat.id}"') #–±–µ—Ä–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ë–î, —Å —É—á–µ—Ç–æ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    products = cursor.fetchall()
    if len(products) != 0:
        print(products)
        unique = set(products)
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        cartMessage = '–£ –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n'
        fullcartprice = 0
        # menu = '–£ –Ω–∞—Å –≤ –º–µ–Ω—é –µ—Å—Ç—å:\n'
        for [i] in unique: #—Ü–∏–∫–ª –Ω–∞ –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            count = products.count((f'{i}',)) # c–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º i –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cursor.execute(f'SELECT price FROM Products WHERE name = "{i}"')
            price = cursor.fetchone()[0]
            priceforproduct = count * int(price) #–ø–æ–¥—Å—á–µ—Ç —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ
            fullcartprice += priceforproduct
            cartMessage += i + ' - x' + str(count) + ' | ' + str(priceforproduct) + ' —Ä—É–±.\n' #–≤—ã–≤–æ–¥ –≤—Å–µ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cartMessage += f'\n –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {fullcartprice} —Ä—É–±. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑?'
        connection.close()
        await bot.send_message(callback.from_user.id, cartMessage, reply_markup=get_keyboard_cart())
        await callback.answer()
    else:
        await empty_cart(callback.message)
        await callback.answer()

@dp.callback_query(F.data.startswith("toCart_")) # —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–æ–≤–∞ —Å–æ–±—ã—Ç–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ—Å—è —Å toCart_
# –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä toCart_–ë—É–ª–∫–∞
async def add_to_cart(callback: types.CallbackQuery):
    action = callback.data.split("_")[1] #—Å–æ–±—ã—Ç–∏–µ –º—ã —Ä–∞–∑–¥–µ–ª—è–µ–º –∏ –±–µ—Ä–µ–º –∏–º–µ–Ω–Ω–æ —á–∞—Å—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
    print(action)
    connection = sqlite3.connect('bakery.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO Cart (user_id, product) VALUES (?, ?);',
                   (str(callback.from_user.id), str(action))) #id –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
    connection.commit()
    connection.close()
    await callback.answer(text=f"{str(action)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!") # –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω


@dp.callback_query(F.data.startswith("add_")) #–§-—Ü–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–ª –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    #user_value = user_data.get(callback.from_user.id, 0)
    action = callback.data.split("_")[1] #–∑–¥–µ—Å—å —Ç–∞–∫ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    if action == 'pirog': #–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–≤–∞—Ä –≤ —Ä–∞–∑–¥–µ–ª "–ü–∏—Ä–æ–≥–∏" –∏–ª–∏ "–ù–µ –ø–∏—Ä–æ–≥–∏" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1/0
        await state.update_data(product_status=1)
    else:
        await state.update_data(product_status=0)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:')
    await state.set_state(AdminStates.name) #–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

@dp.message(AdminStates.name) # —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–æ–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è name
async def new_name(message: types.Message, state: FSMContext) -> None:
    await state.update_data(product_name=message.text)
    await message.reply('–ü—Ä–∏–Ω—è—Ç–æ! –ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞?')
    await state.set_state(AdminStates.price)

@dp.message(AdminStates.price)  # —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–æ–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è price
async def new_price(message: types.Message, state: FSMContext) -> None:
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton( #–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back")
    )
    await state.update_data(product_price=message.text)
    data = await state.get_data() # –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
    if data['product_price'].isdigit() and data['product_name'].isdigit() is False: #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, —É—Å–ª–æ–≤–Ω–æ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –∞ –Ω–∞–∑–≤–∞–Ω–∏–µ - –Ω–µ—Ç
        await message.reply('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω—é!', reply_markup=builder.as_markup())
        connection = sqlite3.connect('bakery.db')
        cursor = connection.cursor()
        cursor.execute('INSERT INTO Products (name, price, is_pirogi) VALUES (?, ?, ?);',
                       (data['product_name'], int(data['product_price']), data['product_status'])) #–≤–≤–µ–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–¥
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connection.commit()
        connection.close()
    else:
        await message.reply('–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ!', reply_markup=builder.as_markup())
    await state.clear()

@dp.callback_query(F.data == "delete by name")
async def deleter(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞):')
    await state.set_state(AdminStates.delete) #–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è

@dp.message(AdminStates.delete)
async def deletebyname(message: types.Message, state: FSMContext) -> None:
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back")
    )
    product_name = message.text
    connection = sqlite3.connect('bakery.db')
    cursor = connection.cursor()
    cursor.execute(f'SELECT name FROM Products WHERE name = "{product_name}"') #–ø–æ–∏—Å–∫ —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –±–¥
    if cursor.fetchone() is None: #–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª–∏, —Ç–æ –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.reply('–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏ —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ!', reply_markup=builder.as_markup())
    else:
        cursor.execute(f'DELETE FROM Products WHERE name = "{product_name}"') #–µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞—à–µ–ª—Å—è, —Ç–æ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è
        await message.reply('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!', reply_markup=builder.as_markup())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connection.commit()
    connection.close()
    await state.clear()

@dp.callback_query(F.data == "back")
async def process_back(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="ü•ß–ü–∏—Ä–æ–≥–∏",
        callback_data="Pirogi")
    )
    builder.add(types.InlineKeyboardButton(
        text="üßÅ–ù–µ –ø–∏—Ä–æ–≥–∏",
        callback_data="Ne pirogi")
    )
    builder.add(types.InlineKeyboardButton(
        text="üõí–ö–æ—Ä–∑–∏–Ω–∞",
        callback_data="Cart")
    )
    if callback.from_user.id == 1372145704:
        builder.add(types.InlineKeyboardButton(
            text="üòé–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data="AdminPanel")
        )
    builder.adjust(3)
    await callback.message.answer(f'ü•ê <strong>–ü–µ–∫–∞—Ä–Ω—è "–í–∞–Ω–∏–ª—å"</strong> ü•ê\n\n  –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',reply_markup=builder.as_markup())
    await callback.message.delete()


@dp.callback_query(F.data == "delete_cart")
async def delete_cart(callback: types.CallbackQuery):
    connection = sqlite3.connect('bakery.db')
    cursor = connection.cursor()
    cursor.execute(f'DELETE FROM Cart WHERE user_id = "{callback.from_user.id}"')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connection.commit()
    connection.close()
    await callback.answer(text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await empty_cart(callback.message)

@dp.callback_query(F.data == "make_order") #–§-—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def make_order(callback: types.CallbackQuery):
    if callback.from_user.username is None: #–µ—Å–ª–∏ —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç username, –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É
        await callback.answer(text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à Telegram Username, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–≤—è–∑–∞—Ç—å—Å—è!", show_alert=True)
    else:
        connection = sqlite3.connect('bakery.db')
        cursor = connection.cursor()
        cursor.execute(f'SELECT product FROM Cart WHERE user_id = "{callback.message.chat.id}"')
        products = cursor.fetchall()
        if len(products) != 0:
            unique = set(products)
            #await bot.delete_message(callback.message.chat.id, callback.message.message_id)
            messageforclient = '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ñ–¥–∏—Ç–µ, –∫–æ–≥–¥–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!\n' #—Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç
            messageforadmin = f'–ö–ª–∏–µ–Ω—Ç @{callback.from_user.username} —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑. –í–æ—Ç —á—Ç–æ –≤ –Ω–µ–≥–æ –≤—Ö–æ–¥–∏—Ç:\n' #—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∞–¥–º–∏–Ω—É
            fullcartprice = 0
            for [i] in unique: #–≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã
                count = products.count((f'{i}',))
                cursor.execute(f'SELECT price FROM Products WHERE name = "{i}"')
                price = cursor.fetchone()[0]
                priceforproduct = count * int(price)
                fullcartprice += priceforproduct
                messageforadmin += i + ' - x' + str(count) + ' | ' + str(priceforproduct) + ' —Ä—É–±.\n' #—á—Ç–æ–±—ã –∞–¥–º–∏–Ω –≤–∏–¥–µ–ª, –∫–∞–∫–æ–π —É –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑
            messageforadmin += f'\n –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {fullcartprice} —Ä—É–±.'
            cursor.execute(f'DELETE FROM Cart WHERE user_id = "{callback.from_user.id}"') #–∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–∞–µ—Ç—Å—è
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            connection.commit()
            connection.close()
            await callback.answer(text=messageforclient, show_alert=True)
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üîô–ù–∞–∑–∞–¥",
                callback_data="back")
            )
            await callback.message.edit_text(messageforclient, reply_markup=builder.as_markup())
            await bot.send_message('1372145704', messageforadmin)
        else:
            await callback.answer(text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ - –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)

@dp.callback_query(F.data == "AdminPanel") #—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def admin_panel(callback: types.CallbackQuery):
    if callback.from_user.id == 1372145704:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="ü•ß–ü–∏—Ä–æ–≥",
            callback_data="add_pirog")
        )
        builder.add(types.InlineKeyboardButton(
            text="üßÅ–ù–µ –ø–∏—Ä–æ–≥",
            callback_data="add_ne pirog")
        )
        builder.add(types.InlineKeyboardButton(
            text="‚ùå–ß—Ç–æ-—Ç–æ —É–¥–∞–ª–∏—Ç—å",
            callback_data="delete by name")
        )
        builder.add(types.InlineKeyboardButton(
            text="üîô–ù–∞–∑–∞–¥",
            callback_data="back")
        )
        builder.adjust(3)
        await callback.message.edit_text(f'ü•ê<strong>–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–∏—Ç—å? \n–ò–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —É–¥–∞–ª–∏—Ç—å?</strong> üò¢', reply_markup=builder.as_markup())

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
